create table CAR(c_no int primary key,owner varchar(20),
model text,colour text);

insert into CAR values(101,'OM','Ertiga','White');
insert into CAR values(102,'Sai','SUV700','White');
insert into CAR values(103,'Ram','Ertiga','RED');

create table driver(driver_no int primary key,
driver_name text,lic_no int,address text,age int,sal int);

insert into driver values(1,'aman',1111,'pune',30,9000);
insert into driver values(2,'sham',2222,'mumbai',40,12000);
insert into driver values(3,'aba',3333,'shirdi',35,15000);

create table CD(c_no int references CAR,driver_no int references driver);

insert into CD values(101,1);
insert into cD values(102,2);
insert into cD values(103,3);
insert into cD values(103,1);


i. Write a function which accepts the driver name and counts the
number of cars driven by the driver.

create or replace function dr(dr_name text) returns int as $$
 declare
 c int;
 begin
  select count(*)into c from car,driver as d,cd where cd.driver_no=d.driver_no and cd.c_no=car.c_no and driver_name=dr_name;
  return c;
 end; $$ language plpgsql;
select dr('sham');

ii. Write a stored function with cursor which accepts the color and
prints the names of all owners who own a car of that color.

 create or replace function disp_ow(car_color car.colour%type)returns void as
 $$ 
 declare
 O_name car.owner%type; 
 c1 cursor for select owner from car where colour=car_color;
 begin
 open c1;
 loop
 fetch c1 into O_name;
  exit when not found; 
 raise notice'Owner name=%',O_name;
end loop;  
close c1;
end;
$$
language plpgsql;
 select disp_ow('black');


iii. Write a trigger before insert/update on Driver. Raise exception if
driver salary is negative or zero

create or replace function m() returns trigger as $$
 begin
  if new.sal<=0 then
   raise exception'Invalid Salary';
  end if;
end; $$ language plpgsql;
 create trigger t before insert or update on driver for each row execute procedure m();

 insert into driver(sal) values(-654); 